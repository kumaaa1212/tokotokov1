// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  name       String
  password   String
  team       String
  icon       String
  bio        String
  followers  Follower[]
  follows    Follow[]
  twitterURL String
  teamURL    String
  createdAt  DateTime  @default(now())
}

model Follow {
  id        Int     @id @default(autoincrement())
  bio       String
  name      String
  icon      String
  team      String
  twitterURL String
  teamURL   String
  frendId   Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
}

model Follower {
  id        Int     @id @default(autoincrement())
  bio       String
  name      String
  icon      String
  team      String
  twitterURL String
  teamURL   String
  frendId   Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
}


model Post{
  id Int @id @default(autoincrement())
  content String
  title String
  createdAt DateTime @default(now())
  labels PostLabel[]
  authorId String?
  authorName String
  authorAvatar String
  thumbnailText String
  thumbnailImg String
  likes Like[]
  bookmarks Bookmark[]
}

model Like {
  id     Int    @id @default(autoincrement())
  postId Int
  authorId String
  post   Post   @relation(fields: [postId], references: [id])
  @@unique([postId, authorId])
}

model Bookmark{
  id Int @id @default(autoincrement())
  postId Int
  authorId String
  post Post @relation(fields: [postId], references: [id])
  @@unique([postId, authorId])
}

model PostLabel {
  id Int @id @default(autoincrement())
  label String
  name String
  league String
  img String
  postId Int
  post Post @relation(fields: [postId], references: [id])
}

model Tweet{
  id Int @id @default(autoincrement())
  content String
  createdAt DateTime @default(now())
  img String?
  authorId String?
  authorName String
  authorAvatar String
  likes TweetLike[]
  label String
}
model TweetLike{
  id Int @id @default(autoincrement())
  tweetId Int
  authorId String
  tweet Tweet @relation(fields: [tweetId], references: [id])
  @@unique([tweetId, authorId])
}

model BoardRoom{
  roomId Int @id @default(autoincrement())
  team String
  createdAt DateTime @default(now())
  board Board[]
}

model Board{
  id Int @id @default(autoincrement())
  roomId Int
  content String
  createdAt DateTime @default(now())
  authorId String?
  authorName String
  authorAvatar String
  likes BoardLike[]
  messages BoardMessage[]
  room BoardRoom @relation(fields: [roomId], references: [roomId])
}

model BoardLike{
  id Int @id @default(autoincrement())
  boardId Int
  authorId String
  board Board @relation(fields: [boardId], references: [id])
  @@unique([boardId, authorId])
}

model BoardMessage{
  id Int @id @default(autoincrement())
  content String
  createdAt DateTime @default(now())
  authorId String?
  authorName String
  authorAvatar String
  boardId Int
  board Board @relation(fields: [boardId], references: [id])
}

model Room {
  id String @id @default(uuid())
  user1Id   String
  user1Name String
  user1Icon String
  user2Id   String
  user2Icon String
  user2Name String
  createdAt DateTime @default(now())
  messages Message[]
}

model Message {
  id Int @id @default(autoincrement())
  content String
  createdAt DateTime @default(now())
  authorId String?
  senderId String
  roomId String?
  room Room? @relation(fields: [roomId], references: [id])
}

model KeepPost{
  id Int @id @default(autoincrement())
  title String
  content String
  authorId String
  createdAt DateTime @default(now())
}